// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simulator.Models;

#nullable disable

namespace Simulator.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    [Migration("20250314015322_AddStorableHinbanTable")]
    partial class AddStorableHinbanTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommonItems.Models.TransportRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransportRecords");
                });

            modelBuilder.Entity("InventoryPalletCoordinator.Models.InventoryPallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Hinban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InventoryPallets");
                });

            modelBuilder.Entity("InventoryPalletCoordinator.Models.InventoryStorage", b =>
                {
                    b.Property<string>("LocationCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("InventoryPalletID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LocationCode");

                    b.HasIndex("InventoryPalletID");

                    b.ToTable("InventoryStorages");
                });

            modelBuilder.Entity("InventoryPalletCoordinator.Models.StorableHinban", b =>
                {
                    b.Property<string>("Hinban")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Hinban");

                    b.ToTable("StorableHinbans");
                });

            modelBuilder.Entity("InventoryPalletCoordinator.Models.TemporaryStorage", b =>
                {
                    b.Property<string>("LocationCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InventoryPalletID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingStationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LocationCode");

                    b.HasIndex("InventoryPalletID");

                    b.ToTable("TemporaryStorages");
                });

            modelBuilder.Entity("ProductionPlanManagement.Models.ProductionPlan", b =>
                {
                    b.Property<string>("DeliveryDate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PalletNumber")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Hinban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryDate", "Line", "Size", "PalletNumber", "Priority");

                    b.HasIndex("DeliveryDate", "Line", "Size", "PalletNumber");

                    b.ToTable("ProductionPlans");
                });

            modelBuilder.Entity("ShippingOperationCoordinator.Models.ShippingStation", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code");

                    b.ToTable("ShippingStations");
                });

            modelBuilder.Entity("ShippingPalletCoordinator.Models.ShikakariStorage", b =>
                {
                    b.Property<string>("LocationCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingPalletID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LocationCode");

                    b.HasIndex("ShippingPalletID");

                    b.ToTable("ShikakariStorages");
                });

            modelBuilder.Entity("ShippingPalletCoordinator.Models.ShippingPallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShippingPallets");
                });

            modelBuilder.Entity("ShippingPalletCoordinator.Models.ShippingPalletItem", b =>
                {
                    b.Property<string>("PalletID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Hinban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("PalletID", "Index");

                    b.ToTable("ShippingPalletItems");
                });

            modelBuilder.Entity("ShippingPalletCoordinator.Models.ShippingStorage", b =>
                {
                    b.Property<string>("LocationCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("ShippingPalletID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingStationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LocationCode");

                    b.HasIndex("ShippingPalletID");

                    b.ToTable("ShippingStorages");
                });

            modelBuilder.Entity("WorkOrderManagement.Models.OrderedItem", b =>
                {
                    b.Property<string>("PalletID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Hinban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PalletID", "Index");

                    b.ToTable("OrderedItems");
                });

            modelBuilder.Entity("WorkOrderManagement.Models.WorkOrder", b =>
                {
                    b.Property<string>("PalletID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Assigned")
                        .HasColumnType("bit");

                    b.Property<string>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PalletNumber")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PalletID");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("InventoryPalletCoordinator.Models.InventoryStorage", b =>
                {
                    b.HasOne("InventoryPalletCoordinator.Models.InventoryPallet", "StoredPallet")
                        .WithMany()
                        .HasForeignKey("InventoryPalletID");

                    b.Navigation("StoredPallet");
                });

            modelBuilder.Entity("InventoryPalletCoordinator.Models.TemporaryStorage", b =>
                {
                    b.HasOne("InventoryPalletCoordinator.Models.InventoryPallet", "StoredPallet")
                        .WithMany()
                        .HasForeignKey("InventoryPalletID");

                    b.Navigation("StoredPallet");
                });

            modelBuilder.Entity("ShippingPalletCoordinator.Models.ShikakariStorage", b =>
                {
                    b.HasOne("ShippingPalletCoordinator.Models.ShippingPallet", "StoredPallet")
                        .WithMany()
                        .HasForeignKey("ShippingPalletID");

                    b.Navigation("StoredPallet");
                });

            modelBuilder.Entity("ShippingPalletCoordinator.Models.ShippingPalletItem", b =>
                {
                    b.HasOne("ShippingPalletCoordinator.Models.ShippingPallet", null)
                        .WithMany("Items")
                        .HasForeignKey("PalletID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingPalletCoordinator.Models.ShippingStorage", b =>
                {
                    b.HasOne("ShippingPalletCoordinator.Models.ShippingPallet", "StoredPallet")
                        .WithMany()
                        .HasForeignKey("ShippingPalletID");

                    b.Navigation("StoredPallet");
                });

            modelBuilder.Entity("WorkOrderManagement.Models.OrderedItem", b =>
                {
                    b.HasOne("WorkOrderManagement.Models.WorkOrder", null)
                        .WithMany("OrderedItems")
                        .HasForeignKey("PalletID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingPalletCoordinator.Models.ShippingPallet", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WorkOrderManagement.Models.WorkOrder", b =>
                {
                    b.Navigation("OrderedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
